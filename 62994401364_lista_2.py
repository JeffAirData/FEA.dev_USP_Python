# -*- coding: utf-8 -*-
"""62994401364_lista_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rjuQ2m3DU78lkG9aZqP8X_FV0CauyVyi

![WhatsApp%20Image%202023-09-10%20at%2011.20.28.jpeg](attachment:WhatsApp%20Image%202023-09-10%20at%2011.20.28.jpeg)

# Fala devs, blz??

Esta será nossa segunda lista de exercícios para você testar seu conhecimento acerca do conteúdo do MÓDULO 3:

-Condicionais


-Loops

## INSTRUÇÕES:

A lista deve ser realizada pelo Jupyter Notebook.

Nâo é necessário entregar a lista para afins de certificado dentro da plataforma, entretanto para alunos da USP que queiram participar do processo seletivo ou conseguir créditos AAC (apenas FEANOS) é necessária a entrega de TODAS as listas.

A entrega das listas ou pelo menos sua excecução é recomendada a fim de exercitar todo o conhecimento adquirido do curso.

O DESAFIO é para realmente te desafiar, por isso não desista de tentar e de continuar com o curso, ao longo das listas você verá que cada vez mais você terá ferramentas para completá-lo.

Caso haja alguma dúvida acerca da lista participe das monitorias que serão oferecidas as quintas e sábados das 17h as 18h pelo DISCORD. Caso seu problema não seje resolvido envie uma mensagem para contato.feadev@gmail.com

O gabarito será disponibilizado na plataforma após o término de periodo de envio
"""

## vamos começar??

"""## QUESTÃO 0

Escreva um programa em Python que solicite ao usuário que insira um número inteiro e, em seguida, verifique se o número é par ou ímpar. Se for par, o programa deve imprimir "O número é par." Caso contrário, deve imprimir "O número é ímpar."

#### LEMBRE-SE

**int (Número Inteiro):**

O tipo de dado int representa números inteiros, ou seja, números sem casas decimais.

Exemplos de inteiros incluem -3, 0, 42, 1001, etc.

Você pode realizar operações aritméticas, como adição, subtração, multiplicação e divisão, com números inteiros.

**float (Número de Ponto Flutuante):**

O tipo de dado float representa números de ponto flutuante, que têm casas decimais.

Exemplos de números de ponto flutuante incluem 3.14, -0.5, 2.71828, etc.

Você pode realizar operações aritméticas com números de ponto flutuante da mesma forma que com inteiros.

**Quando precisar especificar qual tipo de número você aceitará na resposta utilize:**

**numero = float(input("Digite um número: "))**


**numero = int(input("Digite um número: "))**
"""

# Solicita ao usuário que insira um número
numero = int(input("Digite um número: "))

# Verifica se o número é positivo, negativo ou zero
if numero > 0:
    print("O número é positivo")
elif numero == 0:
    print("O número é zero")
else:
    print("O número é negativo")

# Creio ter havido um erro ao repassar a questão aos alunos. O que fora abordado inicialmente deveria ter sido se o número é par ou ímpar, assim:

# Solicita ao usuário que insira um número
numero = int(input("Digite um número: "))

# Verifica se o número é par ou ímpar. Solicitando que o usuário insira um número inteiro, em seguida, verifica-se se o número é par ou ímpar usando o operador de módulo %. Se o resto da divisão por 2 for igual a 0, o número é par e a mensagem "O número é par" é impressa. Caso contrário, a mensagem "O número é ímpar" é impressa. Deste modo:
if numero % 2 == 0:
    print("O número é par.")
else:
    print("O número é ímpar.")

"""## QUESTÃO 1

Você está criando um programa de boas-vindas em Python para um jogo simples. Você deseja que o programa peça ao jogador para inserir um número, e com base nesse número, o programa dará uma resposta personalizada. Se o número inserido pelo jogador for maior que 10, o programa dará as boas-vindas a um jogador experiente. Se for 10 ou menor, o programa dará as boas-vindas a um jogador iniciante. Você precisa usar uma estrutura condicional (if-else) para fazer isso.

Crie um programa em Python que peça ao jogador para digitar um número inteiro. Em seguida, verifique se o número é maior que 10. Se for maior que 10, imprima "Bem-vindo, jogador experiente!". Se for 10 ou menor, imprima "Bem-vindo, jogador iniciante!". Certifique-se de usar uma estrutura condicional (if-else) para determinar a saída com base no número inserido pelo jogador.



lembre-se para pedir que o jogador insira um número você deve usar *input*

A função input() em Python é usada para receber entradas de texto (ou outros tipos de dados, que são tratados como texto) do usuário através do teclado. Ela permite que um programa interaja com o usuário, solicitando que ele insira informações durante a execução do programa.

A sintaxe básica do input() é a seguinte:
"""

variavel = input("Texto da solicitação: ")

""""Texto da solicitação" é a mensagem que será exibida ao usuário, pedindo-lhe que insira algo.
O valor digitado pelo usuário é armazenado na variável especificada (nesse caso, na variável variavel).
"""

# Solicitar ao jogador que insira um número inteiro
numero = int(input("Digite um número inteiro: "))

# Verificar se o número é maior que 10
if numero > 10:
    print("Bem-vindo, jogador experiente!")
else:
    print("Bem-vindo, jogador iniciante!")

"""## QUESTÃO 2

Você deseja criar um programa que ajude os eleitores a entenderem se são obrigados a votar ou se têm apenas o direito de votar com base em sua idade.  Faça um programa que ao digitar a idade, ele diga se a pessoa já pode votar, se é obrigatório ou não

* Faixas de idade e output esperados:*
  - até 16 anos: "Não pode votar"
  - Entre 16 e 18 anos: "Direito a voto, mas não obrigatório"
  - Entre 16 e 70: "Voto Obrigatório"
  - A partir de 70: "Direito a voto, mas não obrigatório"

![Captura%20de%20tela%202023-10-09%20150019.png](attachment:Captura%20de%20tela%202023-10-09%20150019.png)
"""

# Solicitar ao usuário que insira a idade
idade = int(input("Digite sua idade: "))

# Verificar a faixa etária e imprimir o resultado
if idade <= 16:
    print("Não pode votar")
elif 16 < idade < 18:
    print("Direito a voto, mas não obrigatório")
elif 18 <= idade <= 70:
    print("Voto Obrigatório")
else:
    print("Direito a voto, mas não obrigatório")

"""## QUESTÃO 3

Você descobriu um sebo perto da sua casa e resolve dar uma olhada e encontra muitos títulos interessantes. Mas como você não está nadando em dinheiro, terá que fazer algumas escolhas.
- Escreva um programa que retorne se você deverá comprar ou não o livro, considerando que:
  - Ele precisa estar na sua wishlist (nada de comprar por impulso);
  - O preço do sebo deve ser mais barato do que na internet.

a) Você deverá comprar Moby Dick?

b) Você deverá comprar Crime e Castigo?

c) Você deverá comprar a Odisseia?

![Captura%20de%20tela%202023-10-09%20135957.png](attachment:Captura%20de%20tela%202023-10-09%20135957.png)
"""

wishlist = ['Moby Dick', 'Helena', 'A Origem das Espécies', 'Grande Sertão: Veredas', 'Odisseia', 'Rápido e Devagar', 'Sidarta']

precos_sebo = {'Odisseia':50, 'Jane Eyre':61, 'A Divina Comédia': 56, 'Helena':10, 'Moby Dick':55, 'Crime e Castigo':20}
precos_internet = {'Odisseia':30, 'Jane Eyre':32, 'A Divina Comédia': 22, 'Helena':26, 'Moby Dick':145, 'Crime e Castigo':80}

#####SEU CODIGO COMECA AQUI#####

# Função para determinar se você deve comprar um livro
def deve_comprar_livro(livro):
    if livro in wishlist and livro in precos_sebo and livro in precos_internet:
        preco_sebo = precos_sebo[livro]
        preco_internet = precos_internet[livro]
        if preco_sebo < preco_internet:
            return f"Você deve comprar '{livro}' no sebo, pois está na wishlist e é mais barato do que na internet."
        else:
            return f"Não compre '{livro}' no sebo, pois está na wishlist, mas é mais caro do que na internet."
    else:
        return f"Você não deve comprar '{livro}' no sebo, pois não está na wishlist ou não tem informações de preço."

# Verificação para os livros em questão
print(deve_comprar_livro('Moby Dick'))
print(deve_comprar_livro('Crime e Castigo'))
print(deve_comprar_livro('Odisseia'))

"""# QUESTÃO 4

Você está comprando uma sobremesa em uma cafeteria. O preço da sobremesa pode variar, e você tem um voucher que cobre até $20. Se a sobremesa custar mais, você precisará pagar a diferença. Se custar menos, você economizará o valor restante do voucher.

Crie um programa em Python que solicite o preço da sobremesa que você deseja comprar. Em seguida, o programa deve calcular se a operação foi vantajosa e quanto você economizou ou precisa pagar a mais.

Se o preço da sobremesa for maior que 20, o programa deve imprimir "Você precisa pagar X a mais." (onde X é a diferença entre o preço da sobremesa e 20).

Se o preço da sobremesa for igual a 20, o programa deve imprimir "Você não precisa pagar nada a mais."

Se o preço da sobremesa for menor que 20, o programa deve imprimir "Você economizou X." (onde X é a diferença entre 20 e o preço da sobremesa).

![Captura%20de%20tela%202023-10-09%20140707.png](attachment:Captura%20de%20tela%202023-10-09%20140707.png)
"""

# Solicite o preço da sobremesa
# Defina o preço máximo coberto pelo voucher
# Calcule a diferença entre o preço da sobremesa e o valor do voucher
# Verifi1que se você precisa pagar a mais, economizou ou não precisa pagar nada a mais


# Solicitar o preço da sobremesa
preco_sobremesa = float(input("Digite o preço da sobremesa: "))

# Definir o preço máximo coberto pelo voucher
valor_voucher = 20.0

# Calcular a diferença entre o preço da sobremesa e o valor do voucher
diferenca = preco_sobremesa - valor_voucher

# Verificar se você precisa pagar a mais, economizou ou não precisa pagar nada a mais
if diferenca > 0:
    print(f"Você precisa pagar ${diferenca:.2f} a mais.")
elif diferenca == 0:
    print("Você não precisa pagar nada a mais.")
else:
    economia = -diferenca
    print(f"Você economizou ${economia:.2f}.")

"""## QUESTÃO 5

a)Escreva um programa em Python que use um loop para imprimir os números de 1 a 5.

A saída do programa deve ser algo como:

1

2

3

4

5
"""

#Você pode usar um loop for ou while para resolver este exercício, conforme preferir.

# Usando um loop for para imprimir os números de 1 a 5
for numero in range(1, 6):
    print(numero)

""" b)Você ficou animado com o novo programa criado acima para imprimir os números e mostrou pra um amigo que dá aula para o fundamental 1. Ao ver a mágica acontecendo seu amigo implorou para que você construísse uma tabuada automática para ele.

Escreva um código que receba o input de um número e retorne sua tabuada padrão, multiplicando até 10 e ajude o profesor a automatizar suas aulas.
  
 OBS: deixe sua tabuada toda alinhada conforme exemplo:

    n = 7
    
    7 x 1 = 7
    7 x 2 = 14
    .
    .
    .
    7 X  9 = 63
    7 X 10 = 70
"""

# Solicitar ao usuário que insira um número
numero = int(input("Digite um número para a tabuada: "))

# Imprimir a tabuada do número de 1 a 10
for i in range(1, 11):
    resultado = numero * i
    print(f"{numero} x {i} = {resultado}")

"""## QUESTÃO 6

**Bad Romance:**

De volta a 2009. Tem umas músicas com um refrão tão gostosinho que fica martelando na nossa mente, então vamos aproveitar para analisar e exercitar nossas skills de programação. Escreva um código que conte quantas vezes a letra "a" aparece em duas estrofes do famoso hit de Lady Gaga:

![Captura%20de%20tela%202023-10-09%20142324.png](attachment:Captura%20de%20tela%202023-10-09%20142324.png)
"""

# Letras da música
bad_romance = """Rah, rah-ah-ah-ah
Roma, roma-ma
Gaga, ooh-la-la
Want your bad romance

Rah, rah-ah-ah-ah
Roma, roma-ma
Gaga, ooh-la-la
Want your bad romance"""

# Contar a ocorrência da letra 'a' (maiúscula e minúscula)
contagem_a = bad_romance.lower().count('a')

# Imprimir a contagem
print(f'A letra "a" aparece {contagem_a} vezes nas duas estrofes da música.')

"""# Questão 7

O grande poder dos Loops é que você poder printar elementos em uma velocidade muuito maior. Utilize esse novo poder para printar os digitos de 1 a 9 da seguinte maneira:

1
22
333
4444
55555
666666
7777777
88888888
999999999
"""

# Usando loops para imprimir os dígitos de 1 a 9
for i in range(1, 10):
    print(str(i) * i)

"""# Questão 8"""

Escreva um código que receba o input de um número e verifique se ele é primo ou não.

"""![Captura%20de%20tela%202023-10-09%20143231.png](attachment:Captura%20de%20tela%202023-10-09%20143231.png)"""

# Solicita ao usuário que insira um número
# Verifica se o número é maior que 1
# Inicializa uma variável para contar os divisores
# Loop para verificar se o número é primo
# Se encontrarmos um divisor, podemos parar de verificar
# Se não houver divisores além de 1 e o próprio número, é primo

# Solicitar ao usuário que insira um número
numero = int(input("Digite um número: "))

# Verificar se o número é maior que 1
if numero > 1:
    # Inicializar uma variável para contar os divisores
    divisores = 0

    # Loop para verificar se o número é primo
    for i in range(2, numero):
        if numero % i == 0:
            divisores += 1
            break  # Se encontrarmos um divisor, podemos parar de verificar

    # Se não houver divisores além de 1 e o próprio número, é primo
    if divisores == 0:
        print(f"{numero} é um número primo.")
    else:
        print(f"{numero} não é um número primo.")
else:
    print(f"{numero} não é um número primo, pois deve ser maior que 1.")

"""# Questão 9

Crie um programa que peça para digitar um número constantemente sem limite, até que o usário digite o número 0. Em seguida mostre a soma de todos os valores inputados, e a quantidade de números que foram inputados.

![Captura%20de%20tela%202023-10-09%20145809.png](attachment:Captura%20de%20tela%202023-10-09%20145809.png)
"""

soma = 0
quantidade = 0

while True:
    numero = int(input("Digite um número (0 para sair): "))

    if numero == 0:
        break

    soma += numero
    quantidade += 1

if quantidade == 0:
    print("Nenhum número foi inserido.")
else:
    print(f"Soma dos números inseridos: {soma}")
    print(f"Quantidade de números inseridos: {quantidade}")

"""# DESAFIO

Escreva um programa em Python que solicite ao usuário que insira um ano (um número inteiro) e determine se o ano é bissexto ou não. O programa deve continuar pedindo ao usuário para inserir anos até que ele decida parar.

Um ano bissexto é um ano que é divisível por 4, com exceção dos anos que são divisíveis por 100. No entanto, anos divisíveis por 400 também são considerados bissextos. Em outras palavras:

**Anos divisíveis por 4 são bissextos (por exemplo, 2004, 2008, 2012).**

**Anos divisíveis por 100 não são bissextos**

Instruções:

Solicite ao usuário que insira um ano.

Verifique se o ano é bissexto de acordo com as regras mencionadas anteriormente.

Se o ano for bissexto, imprima "O ano [ano] é bissexto.".

Se o ano não for bissexto, imprima "O ano [ano] não é bissexto.".

Pergunte ao usuário se ele deseja verificar outro ano.

Se o usuário quiser verificar outro ano, repita o processo. Caso contrário, encerre o programa.
"""

while True:
    ano = int(input("Digite um ano (0 para sair): "))

    if ano == 0:
        break

    if (ano % 4 == 0 and ano % 100 != 0) or (ano % 400 == 0):
        print(f"O ano {ano} é bissexto.")
    else:
        print(f"O ano {ano} não é bissexto.")

print("Programa encerrado.")

"""### CURIOSIDADE

Para criar um calendário em Python, você pode usar a biblioteca calendar que já está incluída na biblioteca padrão da linguagem. A biblioteca **calendar** fornece várias funções e classes para trabalhar com datas e calendários. Aqui está um exemplo simples de como criar um calendário de um mês específico em Python
"""

import calendar

# Defina o ano e o mês desejados
ano = 2023
mes = 10  # Por exemplo, outubro

# Crie um objeto de calendário
cal = calendar.month(ano, mes)

# Imprima o calendário
print(cal)

"""Neste exemplo, importamos a biblioteca calendar, definimos o ano e o mês desejados (neste caso, outubro de 2023) e, em seguida, usamos a função calendar.month(ano, mes) para criar o calendário desse mês específico. O calendário é retornado como uma string formatada e pode ser impresso no console.

Você pode personalizar ainda mais a exibição do calendário usando as várias funções e métodos oferecidos pela biblioteca calendar, como calendar.weekday() para obter o dia da semana de uma data específica, ou calendar.setfirstweekday() para definir o primeiro dia da semana no calendário.
"""