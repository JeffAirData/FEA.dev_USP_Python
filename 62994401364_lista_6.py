# -*- coding: utf-8 -*-
"""62994401364_lista_6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c93Q0yhBbfnpeAuKLCjxA8qw--J_vhMv

# Lista semana 7 - Pandas 2

![image.png](attachment:image.png)

#### **Fala devs, beleza?**
Esta já é a penúltima lista, onde serão abordados mais assuntos relacionados com a biblioteca Pandas. Bom trabalho!
"""

# Importe a biblioteca Pandas e as demais que pretende usar
import pandas as pd

"""## Exercício 1:
Dado o seguinte DataFrame:
"""

data = {'Nome': ['Alice', 'Bob', 'Charlie', 'David', 'Eva', 'Pedro', 'Jonas', 'Ana', 'Sofia'],
        'Idade': [25, 30, 22, 35, 28, 19, 27, 39, 29],
        'Salário': [4000, 4500, 3500, 5500, 4800, 3000, 6000, 5000, 4500]}

df = pd.DataFrame(data)

"""a) Use a função loc para selecionar as linhas correspondentes aos indivíduos com idades entre 25 e 30 anos."""

## SEU CÓDIGO COMEÇA AQUI ##
#Usar a função loc para selecionar as linhas com idades entre 25 e 30 anos
selecao = df.loc[(df['Idade'] >= 25) & (df['Idade'] <= 30)]

# Exibir o resultado
print(selecao)

"""b) Use a função iloc para selecionar as linhas correspondentes aos indivíduos na primeira e última posição do DataFrame e tire a média de seus salários."""

## SEU CÓDIGO COMEÇA AQUI ##
# Usar iloc para selecionar as linhas da primeira e última posição
selecao = df.iloc[[0, -1]]

# Calcular a média dos salários
media_salarios = selecao['Salário'].mean()

# Exibir a média
print("Média dos salários:", media_salarios)

"""## Exercício 2:
Dado o seguinte DataFrame:
"""

data = {'Categoria': ['A', 'B', 'A', 'C', 'B', 'A', 'B', 'A', 'C', 'C', 'B', 'A'],
        'Valor': [100, 200, 150, 300, 250, 120, 140, 230, 390, 80, 160, 210]}

df = pd.DataFrame(data)

"""a) Calcule a média dos valores para cada categoria."""

## SEU CÓDIGO COMEÇA AQUI ##
# Criar o DataFrame
data = {
    'Categoria': ['A', 'B', 'A', 'C', 'B', 'A', 'B', 'A', 'C', 'C', 'B', 'A'],
    'Valor': [100, 200, 150, 300, 250, 120, 140, 230, 390, 80, 160, 210]
}
df = pd.DataFrame(data)

# Agrupar por 'Categoria' e calcular a média dos valores
media_por_categoria = df.groupby('Categoria')['Valor'].mean()

# Exibir a média dos valores para cada categoria
print(media_por_categoria)

"""b) Calcule a soma dos valores para cada categoria. O que possui a maior soma também possui a maior média? Qual a razão disso ocorrer ou não?"""

## SEU CÓDIGO COMEÇA AQUI ##
# Agrupar por 'Categoria' e calcular a soma dos valores
soma_por_categoria = df.groupby('Categoria')['Valor'].sum()

# Exibir a soma dos valores para cada categoria
print(soma_por_categoria)

"""## Exercício 3:
Dado o seguinte DataFrame:
"""

data = {'Data': ['2023-01-01', '2023-01-01', '2023-01-02', '2023-01-02'],
        'Produto': ['A', 'B', 'A', 'B'],
        'Vendas': [100, 150, 200, 120]}

df = pd.DataFrame(data)

"""Crie uma tabela dinâmica (pivot table) que mostre as vendas totais para cada produto em cada data."""

## SEU CÓDIGO COMEÇA AQUI #
# Criar a tabela dinâmica
pivot_table = df.pivot_table(values='Vendas', index='Data', columns='Produto', aggfunc='sum')

# Exibir a tabela dinâmica
print(pivot_table)

"""## Exercício 4:
Dado os seguintes DataFrames:
"""

df1 = pd.DataFrame({'Chave': ['A', 'B', 'C', 'D'],
                    'Valor1': [10, 12, 6, 4]})

df2 = pd.DataFrame({'Chave': ['B', 'D', 'E', 'F'],
                    'Valor2': [9, 6, 11, 8]})

df3 = pd.DataFrame({'Chave': ['C', 'D', 'E', 'G'],
                    'Valor3': [10, 7, 14, 15]})

"""a) Combine os DataFrames df1 e df2 com base na coluna 'Chave', e deixe a coluna chave como index. Inclua apenas as chaves que aparecem em ambos os dataframes"""

## SEU CÓDIGO COMEÇA AQUI ##
# Combinar df1 e df2
df_combinado = pd.merge(df1, df2, on='Chave', how='inner').set_index('Chave')

# Exibir o DataFrame combinado
print(df_combinado)

"""b) Combine os DataFrames df1, df2 e df3, incluindo todas as chaves e valores. Defina "Chave" como index e substitua os valores não existentes por 0."""

## SEU CÓDIGO COMEÇA AQUI ##
# Combinar df1, df2 e df3
df_combinado = pd.merge(pd.merge(df1, df2, on='Chave', how='outer'), df3, on='Chave', how='outer').set_index('Chave')

# Substituir os valores NaN por 0
df_combinado.fillna(0, inplace=True)

# Exibir o DataFrame combinado
print(df_combinado)

"""c) Adicione uma nova coluna ao dataframe, contendo a soma do valor 1, 2 e 3 para cada chave."""

## SEU CÓDIGO COMEÇA AQUI ##
# Adicionar a coluna 'SomaTotal' com a soma de 'Valor1', 'Valor2' e 'Valor3'
df_combinado['SomaTotal'] = df_combinado['Valor1'] + df_combinado['Valor2'] + df_combinado['Valor3']

# Exibir o DataFrame atualizado
print(df_combinado)

"""## Exercício 5
Vamos importar dados de ações utilizando a biblioteca Yahoo Finance, e você trabalhará em cima deste dataframe.
"""

# Caso não tenha essa biblioteca instalada, rode o código a seguir:
!pip install yfinance

# importando a biblioteca:
import yfinance as yf


ticker_symbol = ["BBAS3.SA"]
start_date = "2020-06-01"
end_date = "2023-06-01"
#dataframe:
data = yf.download(ticker_symbol, start=start_date, end=end_date)

"""a) Faça um novo dataframe, contendo as colunas de preço de fechamento ajustado ('Adj Close') e de volume de negociações ('Volume')."""

## SEU CÓDIGO COMEÇA AQUI ##
# Definir o símbolo do ticker, as datas de início e término
ticker_symbol = "BBAS3.SA"  # Você pode substituir pela ação de sua escolha
start_date = "2020-06-01"
end_date = "2023-06-01"

# Baixar os dados do ticker
data = yf.download(ticker_symbol, start=start_date, end=end_date)

# Criar um novo DataFrame com 'Adj Close' e 'Volume'
novo_dataframe = data[['Adj Close', 'Volume']]

# Exibir as primeiras linhas do novo DataFrame
print(novo_dataframe.head())

"""b) Em qual dia a ação atingiu sua maior cotação?"""

## SEU CÓDIGO COMEÇA AQUI ##
# Encontrar a data com a maior cotação de fechamento ajustado
data_maxima = novo_dataframe['Adj Close'].idxmax()

# Encontrar o valor da maior cotação de fechamento ajustado
valor_maximo = novo_dataframe['Adj Close'].max()

# Exibir a data e o valor da maior cotação
print(f"Maior cotação de fechamento ajustado: {valor_maximo} na data {data_maxima}")

"""c) Em qual dia a ação foi mais negociada?"""

## SEU CÓDIGO COMEÇA AQUI ##
# Encontrar a data com o maior volume de negociações
data_volume_maximo = novo_dataframe['Volume'].idxmax()

# Encontrar o valor do maior volume de negociações
volume_maximo = novo_dataframe['Volume'].max()

# Exibir a data e o valor do maior volume de negociações
print(f"Maior volume de negociações: {volume_maximo} na data {data_volume_maximo}")

"""d) Adicione uma coluna no dataframe, contendo a variação percentual da cotação da ação"""

## SEU CÓDIGO COMEÇA AQUI ##
# Se 'novo_dataframe' foi criado como uma fatia de 'data', você pode usar o método copy() para evitar o aviso
novo_dataframe = data[['Adj Close', 'Volume']].copy()

# Adicionar a coluna de variação percentual
novo_dataframe['Variação Percentual'] = novo_dataframe['Adj Close'].pct_change() * 100

# Exibir as primeiras linhas do DataFrame atualizado
print(novo_dataframe.head())

"""e) Calcule o retorno anualizado médio da ação. Considere que um ano possui 252 dias úteis em média."""

## SEU CÓDIGO COMEÇA AQUI #
#Calcular o Retorno Diário: Utilize a variação percentual diária da ação, já calculada como a coluna 'Variação Percentual' no seu DataFrame.
#Converter o Retorno Diário para Retorno Anualizado: O retorno anualizado pode ser calculado a partir do retorno diário assumindo 252 dias úteis em um ano.
#A fórmula para isso é [(1+retorno diário médio)**252]-1
#Calculemos:
# Calcular o retorno diário médio
retorno_diario_medio = novo_dataframe['Variação Percentual'].mean() / 100

# Calcular o retorno anualizado
retorno_anualizado = (1 + retorno_diario_medio) ** 252 - 1

# Converter para porcentagem
retorno_anualizado_percentual = retorno_anualizado * 100

# Exibir o retorno anualizado
print(f"Retorno anualizado médio da ação: {retorno_anualizado_percentual:.2f}%")

"""## QUESTÃO 6

Você tem um DataFrame com informações sobre produtos em um estoque, incluindo nomes de produtos, preços e quantidades em estoque. Resolva as seguintes tarefas:

a) Agrupe os produtos por categoria e calcule a média e a mediana dos preços por categoria.
"""

data = {'Produto': ['A', 'B', 'C', 'D', 'E'],
        'Categoria': ['Eletrônicos', 'Roupas', 'Eletrônicos', 'Roupas', 'Eletrônicos'],
        'Preço': [1000, 50, 800, 30, 1200],
        'Quantidade_Estoque': [10, 15, 5, 8, 12]}

##seu código começa aqui###
# Criar o DataFrame
data = {
    'Produto': ['A', 'B', 'C', 'D', 'E'],
    'Categoria': ['Eletrônicos', 'Roupas', 'Eletrônicos', 'Roupas', 'Eletrônicos'],
    'Preço': [1000, 50, 800, 30, 1200],
    'Quantidade_Estoque': [10, 15, 5, 8, 12]
}
df = pd.DataFrame(data)

# Agrupar por 'Categoria' e calcular a média e a mediana dos preços
media_preco = df.groupby('Categoria')['Preço'].mean()
mediana_preco = df.groupby('Categoria')['Preço'].median()

# Exibir os resultados
print("Média dos preços por categoria:")
print(media_preco)
print("\nMediana dos preços por categoria:")
print(mediana_preco)

"""b) Encontre o produto mais caro em estoque."""

data = {'Produto': ['A', 'B', 'C', 'D', 'E'],
        'Categoria': ['Eletrônicos', 'Roupas', 'Eletrônicos', 'Roupas', 'Eletrônicos'],
        'Preço': [1000, 50, 800, 30, 1200],
        'Quantidade_Estoque': [10, 15, 5, 8, 12]}
df = pd.DataFrame(data)

##seu código começa aqui###
# Encontrar o índice do produto mais caro
indice_mais_caro = df['Preço'].idxmax()

# Encontrar o produto mais caro
produto_mais_caro = df.loc[indice_mais_caro]

# Exibir o produto mais caro
print("Produto mais caro em estoque:")
print(produto_mais_caro)

"""## QUESTÃO 7

Suponha que você tenha um DataFrame com informações sobre jogos de video game, incluindo o nome do jogo, a plataforma em que ele foi lançado e sua classificação. Realize as seguintes tarefas:

a) Crie um DataFrame a partir dos seguintes dados:
"""

data = {'Nome_Jogo': ['Super Mario Odyssey', 'The Legend of Zelda', 'FIFA 22', 'Call of Duty: Warzone'],
        'Plataforma': ['Nintendo Switch', 'Nintendo Switch', 'PlayStation 5', 'Xbox Series X'],
        'Classificacao': ['E', 'E', 'E', 'M']}

### seu código começa aqui###
# Criar o DataFrame
df_jogos = pd.DataFrame(data)

# Exibir o DataFrame
print(df_jogos)

"""b) Agrupe os jogos por plataforma e conte quantos jogos estão disponíveis em cada plataforma."""

### seu código começa aqui###
# Agrupar por 'Plataforma' e contar os jogos em cada plataforma
contagem_jogos_por_plataforma = df_jogos.groupby('Plataforma')['Nome_Jogo'].count()

# Exibir a contagem de jogos por plataforma
print(contagem_jogos_por_plataforma)

"""c) Encontre a plataforma com a maior quantidade de jogos."""

### seu código começa aqui###
# Encontrar a plataforma com a maior quantidade de jogos
plataforma_mais_jogos = contagem_jogos_por_plataforma.idxmax()
max_jogos = contagem_jogos_por_plataforma.max()

# Exibir a plataforma com a maior quantidade de jogos
print(f"A plataforma com a maior quantidade de jogos é {plataforma_mais_jogos} com {max_jogos} jogos.")

"""## QUESTÃO 8

Você possui um DataFrame com informações sobre espécies de árvores encontradas em diferentes estados do Brasil. O DataFrame possui as colunas 'Estado', 'Espécie', 'Quantidade', e 'Altura Média'. Crie uma análise de dados para responder às seguintes perguntas e aprenda algumas curiosidades interessantes sobre as árvores do Brasil:
"""

import pandas as pd

data = {'Estado': ['São Paulo', 'São Paulo', 'Rio de Janeiro', 'Rio de Janeiro', 'Minas Gerais'],
        'Espécie': ['Ipê Amarelo', 'Ipê Roxo', 'Ipê Amarelo', 'Ipê Roxo', 'Quaresmeira'],
        'Quantidade': [100, 50, 80, 40, 70],
        'Altura Média': [8, 7, 7, 6, 10]}

df = pd.DataFrame(data)

"""a) Qual é a espécie de árvore mais comum em cada estado? Mostre uma lista com o nome do estado e a espécie mais comum."""

### seu código começa aqui###
#Para encontrar a espécie de árvore mais comum em cada estado, podemos agrupar o DataFrame por 'Estado' e, em seguida, encontrar a espécie com a maior 'Quantidade' em cada grupo.
# Agrupando por 'Estado' e encontrando a espécie com a maior 'Quantidade' em cada grupo
especie_mais_comum_por_estado = df.groupby('Estado')['Quantidade'].idxmax().apply(lambda x: df.loc[x, 'Espécie'])

# Exibir o resultado
print(especie_mais_comum_por_estado)

"""b) Qual é a altura média das árvores por espécie? Apresente uma tabela que lista as espécies e suas alturas médias."""

### seu código começa aqui###
# Agrupando por 'Espécie' e calculando a altura média
altura_media_por_especie = df.groupby('Espécie')['Altura Média'].mean()

# Convertendo para DataFrame para melhor visualização
altura_media_por_especie_df = altura_media_por_especie.reset_index()

# Exibir a tabela
print(altura_media_por_especie_df)

"""c) Qual é o estado com a maior altura média de árvores? Mostre o nome do estado e sua altura média."""

### seu código começa aqui###
# Agrupando por 'Estado' e calculando a altura média
altura_media_por_estado = df.groupby('Estado')['Altura Média'].mean()

# Encontrando o estado com a maior altura média
estado_maior_altura_media = altura_media_por_estado.idxmax()
maior_altura_media = altura_media_por_estado.max()

# Exibir o resultado
print(f"O estado com a maior altura média de árvores é {estado_maior_altura_media} com uma altura média de {maior_altura_media} metros.")

"""d) Qual é o estado com a maior quantidade total de árvores? Mostre o nome do estado e a quantidade total de árvores."""

### seu código começa aqui###
#Para encontrar o estado com a maior quantidade total de árvores, precisamos somar as quantidades de árvores por estado e depois identificar qual estado tem o total mais alto.
# Agrupando por 'Estado' e somando as quantidades
quantidade_total_por_estado = df.groupby('Estado')['Quantidade'].sum()

# Encontrando o estado com a maior quantidade total de árvores
estado_maior_quantidade = quantidade_total_por_estado.idxmax()
maior_quantidade = quantidade_total_por_estado.max()

# Exibir o resultado
print(f"O estado com a maior quantidade total de árvores é {estado_maior_quantidade} com {maior_quantidade} árvores.")

"""e) Qual é a espécie de árvore com a menor altura média? Mostre o nome da espécie e sua altura média."""

### seu código começa aqui###
#Para encontrar a espécie de árvore com a menor altura média, precisamos agrupar o DataFrame por 'Espécie' e calcular a média da 'Altura Média' para cada espécie. Em seguida, identificaremos qual espécie tem a menor altura média. Aqui está o código para isso:
# Agrupando por 'Espécie' e calculando a altura média
altura_media_por_especie = df.groupby('Espécie')['Altura Média'].mean()

# Encontrando a espécie com a menor altura média
especie_menor_altura_media = altura_media_por_especie.idxmin()
menor_altura_media = altura_media_por_especie.min()

# Exibir o resultado
print(f"A espécie de árvore com a menor altura média é {especie_menor_altura_media} com uma altura média de {menor_altura_media} metros.")

"""# DESAFIO

Você possui um DataFrame com informações sobre uma temporada da Fórmula 1. O DataFrame contém as colunas 'Piloto', 'Equipe', 'Pontuação' e 'Vitórias'. Sua tarefa é encontrar o melhor piloto da temporada com base em sua pontuação e número de vitórias.
"""

import pandas as pd

data = {'Piloto': ['Lewis Hamilton', 'Max Verstappen', 'Charles Leclerc', 'Lando Norris', 'Valtteri Bottas'],
        'Equipe': ['Mercedes', 'Red Bull Racing', 'Ferrari', 'McLaren', 'Mercedes'],
        'Pontuação': [385, 391, 334, 256, 221],
        'Vitórias': [10, 9, 6, 3, 2]}

df = pd.DataFrame(data)

"""Encontre o melhor piloto da temporada de acordo com a pontuação e número de vitórias. O melhor piloto é aquele que tem a maior pontuação e, em caso de empate na pontuação, o maior número de vitórias."""

### seu código começa aqui###
# Ordenando o DataFrame pela 'Pontuação' e 'Vitórias', ambos de forma decrescente
df_ordenado = df.sort_values(by=['Pontuação', 'Vitórias'], ascending=[False, False])

# Selecionando o melhor piloto
melhor_piloto = df_ordenado.iloc[0]

# Exibir o melhor piloto
print(f"O melhor piloto da temporada é {melhor_piloto['Piloto']} da equipe {melhor_piloto['Equipe']}, com {melhor_piloto['Pontuação']} pontos e {melhor_piloto['Vitórias']} vitórias.")

