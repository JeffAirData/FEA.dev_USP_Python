# -*- coding: utf-8 -*-
"""62994401364_lista_7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nuDcCFw6Yxf7ldIHXqhjrF8CKsq_1W0A

# Lista semana 7 - Pandas 2

![image-3.png](attachment:image-3.png)

#### **Fala devs, beleza?**
Esta já é a última lista, onde serão abordados mais assuntos relacionados com a biblioteca Pandas. Bom trabalho!

## QUESTÃO 1:

Você é um analista de dados em uma empresa de varejo e recebeu um conjunto de dados contendo informações sobre as vendas mensais de diversos produtos. Sua tarefa é criar um gráfico de barras utilizando a biblioteca Matplotlib para representar a quantidade de vendas por categoria de produtos. Qual é o tipo de gráfico mais apropriado para essa tarefa? Como você personalizaria esse gráfico para torná-lo mais informativo? Lembre-se de baixar todas as bibliotecas necessárias
"""

import pandas as pd
import matplotlib.pyplot as plt

df_vendas = pd.DataFrame({"Produto": ["Produto A", "Produto B", "Produto C", "Produto D"],
    "QuantidadeVendida": [100, 150, 80, 120]
})

    ### seu código começa aqui ###

# Dados
df_vendas = pd.DataFrame({
    "Produto": ["Produto A", "Produto B", "Produto C", "Produto D"],
    "QuantidadeVendida": [100, 150, 80, 120]
})

# Criando o gráfico de barras
plt.figure(figsize=(8, 6)) # Ajustando o tamanho do gráfico
plt.bar(df_vendas['Produto'], df_vendas['QuantidadeVendida'], color='skyblue') # Criando as barras

# Personalização
plt.xlabel('Produto') # Adicionando rótulo ao eixo x
plt.ylabel('Quantidade Vendida') # Adicionando rótulo ao eixo y
plt.title('Vendas por Categoria de Produto') # Adicionando título ao gráfico
plt.xticks(rotation=45) # Rotacionando os rótulos do eixo x para melhor visualização
plt.grid(axis='y', linestyle='--', alpha=0.7) # Adicionando uma grade horizontal

# Exibindo o gráfico
plt.show()

"""a) Rode o codigo abaixo para descobrir qual a cor do gráfico do item a) que você deve adicionar"""



import random

cores = ["Vermelho", "Verde", "Azul", "Amarelo", "Rosa", "Laranja", "Roxo"]
cor_aleatoria = random.choice(cores)

print(f"Nome da Cor: {cor_aleatoria}")

### seu código começa aqui ###

# Dados para o gráfico
df_vendas = pd.DataFrame({
    "Produto": ["Produto A", "Produto B", "Produto C", "Produto D"],
    "QuantidadeVendida": [100, 150, 80, 120]
})

# Mapeando o nome da cor para um valor que o Matplotlib reconheça
cor_mapa = {
    "Vermelho": "red",
    "Verde": "green",
    "Azul": "blue",
    "Amarelo": "yellow",
    "Rosa": "pink",
    "Laranja": "orange",
    "Roxo": "purple"
}
cor_grafico = cor_mapa[cor_aleatoria]

# Criando o gráfico de barras na cor selecionada
plt.figure(figsize=(8, 6))
plt.bar(df_vendas['Produto'], df_vendas['QuantidadeVendida'], color=cor_grafico)
plt.xlabel('Produto')
plt.ylabel('Quantidade Vendida')
plt.title('Vendas por Categoria de Produto')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Exibindo o gráfico
plt.show()

print(f"Nome da Cor: {cor_aleatoria}")

"""## QUESTÃO 2

Agora, vamos abordar a análise de dados do Titanic usando as bibliotecas Matplotlib e Seaborn. Considere o conjunto de dados do Titanic disponível publicamente. Siga o passo a passo para realizar uma análise de dados com foco nas seguintes perguntas:

O Titanic foi um navio de passageiros famoso que afundou em sua viagem inaugural em 1912 após colidir com um iceberg no Atlântico Norte. O desastre resultou na perda de mais de 1.500 vidas e é considerado um dos eventos mais trágicos da história marítima. A história do Titanic continua a ser lembrada e estudada como um dos naufrágios mais notórios da história.

![Captura%20de%20tela%202023-11-08%20205713.png](attachment:Captura%20de%20tela%202023-11-08%20205713.png)

Você baixará uma base com um conjunto de dados do Titanic, com informações sobre os passageiros. Cada coluna tem um significado específico:





| Coluna          | Descrição                                           | Tradução                                     |
|-----------------|----------------------------------------------------|----------------------------------------------|
| **PassengerId** | Número do passageiro.                               | Número do Passageiro                         |
| **Survived**    | Indica se o passageiro sobreviveu ou não.         | Sobreviveu                                  |
|                 | 0 = Dead (Morto)                                   | 0 = Morto                                    |
|                 | 1 = Alive (Vivo)                                  | 1 = Vivo                                     |
| **Pclass**      | Representa a classe social do passageiro.         | Classe Social                               |
|                 | 1 = First class (Primeira classe)                 | 1 = Primeira Classe                         |
|                 | 2 = Second class (Segunda classe)                 | 2 = Segunda Classe                          |
|                 | 3 = Third class (Terceira classe)                | 3 = Terceira Classe                         |
| **Name**        | Nome do passageiro.                                | Nome do Passageiro                          |
| **Sex**         | Gênero do passageiro.                              | Gênero                                      |
| **Age**         | Idade do passageiro.                               | Idade                                       |
| **SibSp**       | Número de irmãos do passageiro.                   | Número de Irmãos                            |
|                 | (Não está claro o que significa "Parch", que     | (Não está claro o que significa "Parch", que |
|                 | provavelmente deveria ser "Número de pais/filhos").| provavelmente deveria ser "Número de pais/filhos"). |
| **Ticket**      | Número do bilhete.                                 | Número do Bilhete                           |
| **Fare**        | Tarifa paga pelo passageiro.                       | Tarifa Paga                                 |




**A sua tarefa será ao final da lista conseguir responder todas as perguntas abaixo com GRÁFICOS. Boa sorte!!**

a) Qual é a proporção de passageiros que sobreviveram e não sobreviveram?

b) Qual é a proporção de sobreviventes por sexo?

c) Qual é a média de idade dos passageiros que sobreviveram em comparação com os que não sobreviveram? Crie um gráfico de barras ou um box-plot para visualizar essa diferença.

d) Qual é a quantidade de sobreviventes em cada classe social?

### SIGA O PASSO A PASSO

### **Preparação dos Dados e  Limpeza de Dados**

a) Baixe o conjunto de dados do Titanic e importe-o para um DataFrame do Pandas.
A base de dados utilizada pode ser acessada pelo link https://www.kaggle.com/datasets/brendan45774/test-file, baixe-a e importe-a para continuar com a lista.
"""

from google.colab import drive
drive.mount('/content/drive')

path = '/content/drive/My Drive/tested.csv'
df = pd.read_csv(path)
titanic_data = pd.read_csv(path)
df = titanic_data
df.head()

"""b) Limpe o conjunto de dados, removendo colunas que não serão utilizadas, dado as perguntas que deverão ser respondidas.


"""

### seu código começa aqui##
# Vamos focar agora em limpar o conjunto de dados, removendo as colunas que não serão necessárias para responder às perguntas especificadas. As perguntas são sobre a sobrevivência dos passageiros, proporção por sexo, média de idade e quantidade de sobreviventes por classe social. Portanto, podemos remover colunas que não estão relacionadas a esses aspectos. As colunas como 'Name', 'Ticket', 'Fare', 'Cabin' e 'Embarked' podem ser removidas, pois não contribuem diretamente para as análises que pretendemos realizar.
# Removendo colunas que podem não ser necessárias para a análise
colunas_a_remover = ['Name', 'Ticket', 'Cabin', 'Fare']
df_limpo = df.drop(colunas_a_remover, axis=1)

# Exibindo as primeiras linhas do DataFrame limpo
df_limpo.head()

"""c) Renomeie as colunas para torná-las mais curtas e em português, dado que a base está em inglês."""

### seu código começa aqui##
# Renomeando as colunas
titanic_data.rename(columns={
    'PassengerId': 'IdPassageiro',
    'Survived': 'Sobreviveu',
    'Pclass': 'Classe',
    'Sex': 'Sexo',
    'Age': 'Idade',
    'SibSp': 'IrmaosConjuges',
    'Parch': 'PaisFilhos'
}, inplace=True, errors='ignore')

print(titanic_data)

"""d) Verifique que não tenha valores nulos dentro da base de dados. Caso tiver, exclua toda a linha que tenha valor nulo"""

### seu código começa aqui##
# Verificando os valores nulos iniciais
valores_nulos_iniciais = titanic_data.isnull().sum()
print(valores_nulos_iniciais)

# Preenchendo os valores nulos para 'Idade' com a mediana
titanic_data['Idade'].fillna(titanic_data['Idade'].median(), inplace=True)

# Verificando os valores nulos e as linhas duplicadas após as alterações
valores_nulos_finais = titanic_data.isnull().sum()
print(valores_nulos_finais)

"""e) Lide com dados duplicados: Verifique e remova quaisquer linhas duplicadas no conjunto de dados usando o método .drop_duplicates()."""

### seu código começa aqui##
# Verificando e removendo dados duplicados
linhas_duplicadas_antes = titanic_data.duplicated().sum()
titanic_data.drop_duplicates(inplace=True)
linhas_duplicadas_apos = titanic_data.duplicated().sum()

# Verificando a quantidade de linhas duplicadas
print("Linhas duplicadas antes da remoção:", linhas_duplicadas_antes)

# Verificando a quantidade de linhas duplicadas após a remoção
print("Linhas duplicadas após a remoção:", linhas_duplicadas_apos)

print(titanic_data)

print(titanic_data.head())

titanic_data.shape

titanic_data

print(titanic_data.columns)

"""### Qual é a proporção de passageiros que sobreviveram e não sobreviveram?

Para responder a esta pergunta, você pode criar um gráfico de pizza com as contagens de passageiros sobreviventes e não sobreviventes.

No contexto do conjunto de dados do Titanic, a expressão se refere à contagem do número de passageiros que sobreviveram e o número de passageiros que não sobreviveram ao desastre. A coluna "Sobreviveu" no conjunto de dados  possui valores binários, onde:

**1 representa que o passageiro sobreviveu.**

**0 representa que o passageiro não sobreviveu (ou seja, faleceu).**


A ideia é calcular a contagem ou frequência desses dois valores na coluna "Sobreviveu" para determinar quantos passageiros sobreviveram e quantos não sobreviveram.
"""

## seu código começa aqui##

import matplotlib.pyplot as plt

# Calcule as contagens de sobreviventes e não sobreviventes
contagem_sobreviventes = titanic_data['Sobreviveu'].value_counts()

# Crie um gráfico de pizza
plt.figure(figsize=(8, 8))
plt.pie(contagem_sobreviventes, labels=['Não Sobreviveu', 'Sobreviveu'], autopct='%1.1f%%')
plt.title('Proporção de Sobreviventes e Não Sobreviventes no Titanic')
plt.show()

"""**curiosidade: oq siginifica autopct='%1.1f%%**
    
O parâmetro autopct em um gráfico de pizza (pie chart) do Matplotlib é usado para formatar a exibição das porcentagens das fatias no gráfico. Ele aceita uma string de formatação que controla como as porcentagens são exibidas.

%1.1f%%: Vamos dividi-lo em partes:
%1.1f: Este é um especificador de formato que indica que queremos exibir um número de ponto flutuante (float) com uma casa decimal.
%%: Este é usado para exibir o símbolo de porcentagem "%" literalmente.
Portanto, %1.1f%% significa que estamos formatando o número de ponto flutuante com uma casa decimal e, em seguida, adicionamos o símbolo de porcentagem "%" no final.

Por exemplo, se a porcentagem da fatia for 25.4%, autopct='%1.1f%%' fará com que ela seja exibida como "25.4%". Isso ajuda a fornecer uma exibição mais precisa das porcentagens no gráfico de pizza. Você pode ajustar a formatação conforme necessário para atender às suas preferências.

### Qual é a proporção de sobreviventes por sexo?

Passo a Passo:

**Calcule a contagem de sobreviventes por sexo. (utilize groupby)**

Neste passo, você está agrupando os dados por sexo (gênero) e, em seguida, calculando a contagem de sobreviventes para cada grupo. Isso significa que você está contando quantos passageiros sobreviveram para cada categoria de sexo (masculino e feminino).


**Calcule a proporção de sobreviventes para cada sexo**

Agora, você está calculando a proporção de sobreviventes para cada categoria de sexo. Isso é feito dividindo o número de sobreviventes para cada sexo pelo total de sobreviventes.

**Exiba a proporção de sobreviventes por sexo**

Neste passo, você está simplesmente exibindo a proporção de sobreviventes por sexo. Isso mostrará a proporção de passageiros sobreviventes do sexo masculino e feminino em relação ao total de sobreviventes.


**Crie um gráfico de barras para representar a proporção de sobreviventes por sexo**
"""

### seu código começa aqui##

# Cálculo da contagem de sobreviventes por sexo
# Utilizou-se a função groupby para agrupar os dados por sexo e, em seguida, somarmos os valores da coluna Survived para cada grupo

survivors_by_sex = titanic_data.groupby('Sexo')['Sobreviveu'].sum()
print(survivors_by_sex)

"""###Discussão sobre a Inconsistência nos Dados
A análise revelou que, de acordo com o conjunto de dados, nenhum passageiro do sexo masculino sobreviveu, o que é altamente improvável dada a história conhecida do naufrágio do Titanic. Isso sugere possíveis problemas com os dados.

"""

# Cálculo da proporção de sobreviventes para cada sexo

# Calcular o total de sobreviventes
total_survivors = titanic_data['Sobreviveu'].sum()

# Calcular a contagem de sobreviventes por sexo
survivors_by_sex = titanic_data.groupby('Sexo')['Sobreviveu'].sum()

# Calcular a proporção de sobreviventes por sexo
proportion_of_survivors_by_sex = survivors_by_sex / total_survivors

print(proportion_of_survivors_by_sex)

# Calculando a proporção de sobreviventes por sexo
proportion_of_survivors_by_sex = survivors_by_sex / total_survivors

# Exibindo a proporção de sobreviventes por sexo
print(proportion_of_survivors_by_sex)

# Criando um gráfico de barras para representar a proporção de sobreviventes por sexo
plt.figure(figsize=(8, 5))
proportion_of_survivors_by_sex.plot(kind='bar', color=['pink', 'lightblue'])
plt.title('Proporção de Sobreviventes por Sexo no Titanic')
plt.xlabel('Sexo')
plt.ylabel('Proporção de Sobreviventes')
plt.xticks(rotation=0)
plt.show()

"""###  Qual é a média de idade dos passageiros que sobreviveram em comparação com os que não sobreviveram?

Passo a Passo:

**Calcule a média de idade dos passageiros que sobreviveram e dos que não sobreviveram**

Primeiro, calcule a média de idade dos passageiros que sobreviveram e dos que não sobreviveram.

**Crie um gráfico de barras para visualizar a diferença na média de idade**

Agora, crie um gráfico de barras para visualizar a diferença na média de idade entre os grupos de sobreviventes e não sobreviventes
"""

### seu código começa aqui##

# Calculando a média de idade dos passageiros que sobreviveram e dos que não sobreviveram
age_mean_survived = titanic_data.groupby('Sobreviveu')['Idade'].mean()

# Criar um gráfico de barras para visualizar a diferença na média de idade
plt.figure(figsize=(8, 5))
age_mean_survived.plot(kind='bar', color=['red', 'green'])
plt.title('Média de Idade dos Passageiros: Sobreviventes vs Não Sobreviventes')
plt.xlabel('Sobreviveu (0 = Não, 1 = Sim)')
plt.ylabel('Média de Idade')
plt.xticks(rotation=0)
plt.show()

"""### Qual é a quantidade de sobreviventes em cada classe social?

**Calcule o número de sobreviventes em cada classe social**

Primeiro, você precisa agrupar os dados pelo atributo "Pclass" (classe social) e contar o número de sobreviventes em cada classe. Você pode fazer isso da seguinte maneira

**Crie um gráfico de pizza para representar a quantidade de sobreviventes em cada classe social**

Agora, você pode criar um gráfico de pizza para visualizar a distribuição dos sobreviventes em cada classe social
"""

### seu código começa aqui##

# Calculando o número de sobreviventes em cada classe social
survivors_by_class = titanic_data[titanic_data['Sobreviveu'] == 1].groupby('Classe')['Sobreviveu'].count()

# Cores válidas para o gráfico
colors = ['gold', 'silver', 'darkorange']

# Criar um gráfico de pizza para representar a quantidade de sobreviventes em cada classe social
plt.figure(figsize=(8, 8))
survivors_by_class.plot(kind='pie', autopct='%1.1f%%', startangle=140, colors=colors)
plt.title('Quantidade de Sobreviventes em Cada Classe Social')
plt.ylabel('')  # Remover o label do eixo y para melhor visualização
plt.show()

"""# QUESTÃO 3

Agora usaremos um conjunto de dados que contém estatísticas sobre os bilionários do mundo, incluindo informações sobre seus negócios, indústrias e detalhes pessoais. Ele fornece informações sobre a distribuição de riqueza, setores de negócios e demografia de bilionários em todo o mundo.

**dados que contém na base: O ranking do bilionário em termos de riqueza.**

**finalWorth**: O patrimônio líquido final do bilionário em dólares americanos.

**categoria**: A categoria ou setor em que o negócio do bilionário opera.

**personName**: O nome completo do bilionário.

**idade**: A idade do bilionário.

**país**: O país em que o bilionário reside.

**cidade**: A cidade em que o bilionário reside.

**fonte**: A fonte da riqueza do bilionário.

**indústrias**: as indústrias associadas aos interesses comerciais do bilionário.

**countryOfCitizenship**: O país de cidadania do bilionário.

**organização**: O nome da organização ou empresa associada ao bilionário.

**selfMade**: Indica se o bilionário é self-made (Verdadeiro/Falso).

**status**: "D" representa bilionários feitos por conta própria (Fundadores/Empreendedores) e "U" indica riqueza herdada ou não
auferida.

**gênero**: O gênero do bilionário.

**Data de nascimento**: A data de nascimento do bilionário.

**sobrenome**: O sobrenome do bilionário.

**firstName**: O primeiro nome do bilionário.

**título**: O título ou honorífico do bilionário.

**data**: A data da coleta de dados.

**estado**: O estado em que o bilionário reside.

**residênciaEstadoRegião**: A região ou estado de residência do bilionário.

**Ano de nascimento**: O ano de nascimento do bilionário.

**Mês de nascimento**: O mês de nascimento do bilionário.

**Dia do nascimento**: O dia do nascimento do bilionário.

**cpi_country**: Índice de Preços ao Consumidor (IPC) do país do bilionário.

**cpi_change_country**: Mudança de CPI para o país do bilionário.

**gdp_country**: Produto Interno Bruto (PIB) do país do bilionário.

**gross_tertiary_education_enrollment**: Matrícula no ensino superior no país do bilionário.

**gross_primary_education_enrollment_country**: Matrícula no ensino fundamental no país do bilionário.

**life_expectancy_country**: Expectativa de vida no país do bilionário.

**tax_revenue_country_country**: Receita tributária no país do bilionário.

**total_tax_rate_country**: Alíquota total de imposto no país do bilionário.

**population_country**: População do país do bilionário.

**latitude_country**: Latitude do país do bilionário.

**longitude_country**: Coordenada de longitude do país do bilionário.

Responda as seguintes perguntas em forma de **GRÁFICOS**:
    
- Qual é a relação entre a idade dos bilionários e a classificação em termos de riqueza? Crie um gráfico de dispersão para mostrar se a idade dos bilionários tem alguma correlação com sua classificação em termos de riqueza.


- Há uma relação entre a idade dos bilionários e o patrimônio líquido final? Utilize um gráfico de dispersão para explorar se a idade dos bilionários está relacionada ao seu patrimônio líquido final.


- Há alguma correlação entre a idade dos bilionários e a fonte de sua riqueza? Crie um gráfico de dispersão com cores diferentes para representar diferentes fontes de riqueza e analise se a idade dos bilionários varia com base em suas fontes de riqueza.


- Existe uma relação entre a idade dos bilionários e o país de cidadania? Utilize um gráfico de dispersão para explorar como a idade dos bilionários varia em diferentes países de cidadania.

### Preparação dos Dados e Limpeza de Dados

a) Baixe o conjunto de dados Billionaires Statistics Dataset (2023) e importe-o para um DataFrame do Pandas. A base de dados utilizada pode ser acessada pelo link https://www.kaggle.com/datasets/nelgiriyewithana/billionaires-statistics-dataset, baixe-a e importe-a para continuar com a lista
"""

### seu código começa aqui##

import pandas as pd

# Carregando o conjunto de dados
file_path = '/content/drive/My Drive/Billionaires Statistics Dataset.csv'
df_billionaires = pd.read_csv(file_path)

# Exibindo as primeiras linhas do DataFrame para entender a estrutura dos dados
print("Primeiras linhas do DataFrame:")
print(df_billionaires.head())

# Realizando uma análise básica do DataFrame
print("\nInformações do DataFrame:")
df_billionaires.info()

# Obtendo descrições estatísticas das colunas numéricas
print("\nDescrição Estatística do DataFrame:")
print(df_billionaires.describe())

"""b) Limpe o conjunto de dados, removendo colunas que não serão utilizadas, dado as perguntas que deverão ser respondidas.


"""

### seu código começa aqui##

# Colunas relevantes para a análise
relevant_columns = ['rank', 'finalWorth', 'personName', 'age', 'source', 'countryOfCitizenship']

# Reduzindo o conjunto de dados para as colunas relevantes
cleaned_df = df_billionaires[relevant_columns]

# Verificar a presença de dados ausentes
missing_data = cleaned_df.isnull().sum()
print("Dados ausentes antes da limpeza:", missing_data)

# Substituir valores ausentes na coluna 'age' pela mediana
age_median = cleaned_df['age'].median()
cleaned_df['age'].fillna(age_median, inplace=True)

# Verificar novamente a presença de dados ausentes
missing_data_after = cleaned_df.isnull().sum()
print("Dados ausentes após a limpeza:", missing_data_after)

"""c) Renomeie as colunas para torná-las mais curtas e em português, dado que a base está em inglês.


"""

### seu código começa aqui##

# Renomeando as colunas
colunas_em_portugues = {
    'rank': 'classificacao',
    'finalWorth': 'patrimonio',
    'personName': 'nome',
    'age': 'idade',
    'source': 'fonte',
    'countryOfCitizenship': 'paisCidadania'
}

cleaned_df.rename(columns=colunas_em_portugues, inplace=True)

# Verificando as novas colunas
print(cleaned_df.columns)

"""d) Verifique que não tenha valores nulos dentro da base de dados. Caso tiver, exclua toda a linha que tenha valor nulo"""

### seu código começa aqui##

# Verificando se há valores nulos no DataFrame
valores_nulos = cleaned_df.isnull().sum()
print("Valores nulos antes da remoção:", valores_nulos)

# Removendo linhas com valores nulos
cleaned_df.dropna(inplace=True)

# Verificando novamente a presença de valores nulos após a remoção
valores_nulos_apos_remocao = cleaned_df.isnull().sum()
print("Valores nulos após a remoção:", valores_nulos_apos_remocao)

"""e) Lide com dados duplicados: Verifique e remova quaisquer linhas duplicadas no conjunto de dados usando o método .drop_duplicates().

"""

### seu código começa aqui#

# Verificando a presença de linhas duplicadas antes da remoção
linhas_duplicadas_antes = cleaned_df.duplicated().sum()
print("Linhas duplicadas antes da remoção:", linhas_duplicadas_antes)

# Removendo linhas duplicadas
cleaned_df.drop_duplicates(inplace=True)

# Verificando novamente a presença de linhas duplicadas após a remoção
linhas_duplicadas_apos = cleaned_df.duplicated().sum()
print("Linhas duplicadas após a remoção:", linhas_duplicadas_apos)

"""f) criação dos graficos que responderão as perguntas propostas, devem ser feitos utilizando **import seaborn as sns**"""

### seu código começa aqui#

#item a

import seaborn as sns
import matplotlib.pyplot as plt

# Configurando o estilo do gráfico
sns.set(style="whitegrid")

# Criando um gráfico de dispersão
plt.figure(figsize=(10, 6))
sns.scatterplot(x='idade', y='classificacao', data=cleaned_df)

# Definindo os títulos do gráfico e dos eixos
plt.title('Relação entre Idade e Classificação de Riqueza dos Bilionários')
plt.xlabel('Idade')
plt.ylabel('Classificação de Riqueza')

# Exibindo o gráfico
plt.show()

### seu código começa aqui#

#item b

# Configurando o estilo do gráfico
sns.set(style="whitegrid")

# Criando um gráfico de dispersão
plt.figure(figsize=(10, 6))
sns.scatterplot(x='idade', y='patrimonio', data=cleaned_df)

# Definindo os títulos do gráfico e dos eixos
plt.title('Relação entre Idade e Patrimônio Líquido dos Bilionários')
plt.xlabel('Idade')
plt.ylabel('Patrimônio Líquido (em milhões USD)')

# Exibindo o gráfico
plt.show()

### seu código começa aqui#

#item c

# Configurando o estilo do gráfico
sns.set(style="whitegrid")

# Criando um gráfico de dispersão com cores diferentes para cada fonte de riqueza
plt.figure(figsize=(12, 8))
scatter = sns.scatterplot(x='idade', y='fonte', hue='fonte', data=cleaned_df, palette='viridis')

# Definindo os títulos do gráfico e dos eixos
plt.title('Relação entre Idade dos Bilionários e Fonte de Riqueza')
plt.xlabel('Idade')
plt.ylabel('Fonte de Riqueza')

# Exibindo o gráfico
plt.show()

### seu código começa aqui#

#item d

# Encontrando os países com o maior número de bilionários
paises_top = cleaned_df['paisCidadania'].value_counts().nlargest(10).index

# Filtrando o DataFrame para incluir apenas bilionários desses países
df_filtrado = cleaned_df[cleaned_df['paisCidadania'].isin(paises_top)]

# Criando o gráfico de dispersão
plt.figure(figsize=(12, 8))
scatter = sns.scatterplot(x='idade', y='paisCidadania', data=df_filtrado)

# Definindo os títulos do gráfico e dos eixos
plt.title('Relação entre Idade dos Bilionários e País de Cidadania nos Países Top')
plt.xlabel('Idade')
plt.ylabel('País de Cidadania')

# Exibindo o gráfico
plt.show()

"""# DESAFIO

A partir da base de dados **O ranking do bilionário em termos de riqueza**, crie uma pergunta ou alguma relação que você gostaria de responder utilizando os dados de alguma das colunas( EX:   gdp_country: Produto Interno Bruto (PIB) do país do bilionário e total_tax_rate_country: Alíquota total de imposto no país do bilionário).

Mostre o resultado com um gráfico da forma que preferir.
"""

#Uma pergunta interessante para explorar com base nos dados disponíveis poderia ser: "Como a distribuição do patrimônio líquido dos bilionários varia entre diferentes países?". Esta análise pode revelar insights sobre a concentração de riqueza em diferentes nações e mostrar como o patrimônio líquido dos bilionários é distribuído globalmente.

#Para responder a essa pergunta, podemos criar um gráfico de caixa (boxplot), que é eficaz para mostrar a distribuição e identificar outliers em dados numéricos, neste caso, o 'patrimonio' dos bilionários em diferentes 'paisCidadania'.

#O gráfico de caixa mostrará a mediana, quartis e outliers do patrimônio líquido dos bilionários em cada país selecionado. Vou focar nos países com o maior número de bilionários para tornar o gráfico mais legível.

#Aqui está o código para criar esse gráfico:

### seu código começa aqui#

# Configurando o estilo do gráfico
sns.set(style="whitegrid")

# Encontrando os países com o maior número de bilionários
paises_top = cleaned_df['paisCidadania'].value_counts().nlargest(10).index

# Filtrando o DataFrame para incluir apenas bilionários desses países
df_filtrado = cleaned_df[cleaned_df['paisCidadania'].isin(paises_top)]

# Criando o gráfico de caixa
plt.figure(figsize=(14, 8))
sns.boxplot(x='paisCidadania', y='patrimonio', data=df_filtrado)

# Definindo os títulos do gráfico e dos eixos
plt.title('Distribuição do Patrimônio Líquido dos Bilionários por País')
plt.xlabel('País de Cidadania')
plt.ylabel('Patrimônio Líquido (em milhões USD)')
plt.xticks(rotation=45) # Rotacionando os rótulos do eixo x para melhor legibilidade

# Exibindo o gráfico
plt.show()

#Este gráfico oferece uma visão clara de como o patrimônio líquido varia entre os bilionários em diferentes países, destacando diferenças na distribuição de riqueza e potenciais outliers.

"""#*Análise do Gráfico:*

1. O que o Gráfico Mostra:

O gráfico exibe a distribuição do patrimônio líquido dos bilionários nos 10 países com o maior número de bilionários.
Cada "caixa" no gráfico representa um país.

2. Componentes do Gráfico de Caixa:

Linha Mediana (linha central da caixa): Esta linha representa o valor mediano do patrimônio líquido no país. Um valor mediano é o valor do meio quando todos os dados são organizados em ordem. Metade dos bilionários tem um patrimônio líquido acima desse valor e a outra metade abaixo.

Caixa (Quartis): A caixa se estende do primeiro quartil (Q1) ao terceiro quartil (Q3) dos dados. Isso significa que ela abrange a "metade do meio" dos dados. A altura da caixa mostra a variação entre esses dois quartis.

Bigodes (linhas que se estendem da caixa): Estes mostram a variabilidade fora dos quartis superiores e inferiores. Normalmente, eles se estendem até 1,5 vezes o intervalo interquartílico (distância entre Q1 e Q3). Pontos fora dos bigodes podem ser considerados outliers (pontos atípicos).

3. Interpretação:

Países com Maior Variação: Países onde as caixas são mais longas indicam uma maior variação no patrimônio líquido dos bilionários. Isso pode sugerir que esses países têm uma mistura mais diversificada de bilionários, desde relativamente "menos ricos" até "extremamente ricos".

Países com Menor Variação: Caixas mais curtas indicam que a riqueza é mais uniformemente distribuída entre os bilionários nesses países.
Outliers: Pontos acima ou abaixo dos bigodes indicam bilionários com patrimônio líquido excepcionalmente alto ou baixo em comparação com a maioria dos bilionários nesse país.

4. Conclusões:

Desigualdade de Riqueza: Uma grande variação dentro de um país pode indicar desigualdades significativas na riqueza entre os bilionários. Por exemplo, se um país tem muitos outliers acima da caixa, isso indica a presença de bilionários extremamente ricos que se destacam em relação aos outros.

Comparação entre Países: Ao comparar diferentes países, podemos ver quais têm uma concentração maior de bilionários com alto patrimônio líquido e quais têm uma distribuição de riqueza mais equilibrada entre seus bilionários.

#*Para o Público Leigo:*

Pense no gráfico como uma maneira de mostrar quão "esparramada" é a riqueza entre os bilionários em diferentes países. As caixas mais longas mostram onde a diferença entre os bilionários "mais pobres" e os "mais ricos" é maior, enquanto as caixas mais curtas mostram onde os bilionários estão mais próximos em termos de riqueza. Os pontos soltos são indivíduos que são exceções à regra, sendo significativamente mais ricos ou mais pobres do que a maioria dos bilionários em seu país.
"""

